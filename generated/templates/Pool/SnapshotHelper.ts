// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class SnapshotHelper__getReservesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class SnapshotHelper__getTicksResult {
  value0: i32;
  value1: i32;

  constructor(value0: i32, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    return map;
  }
}

export class SnapshotHelper extends ethereum.SmartContract {
  static bind(address: Address): SnapshotHelper {
    return new SnapshotHelper("SnapshotHelper", address);
  }

  getPoolLiquidity(_positionKey: Bytes, _pool: Address): BigInt {
    let result = super.call(
      "getPoolLiquidity",
      "getPoolLiquidity(bytes32,address):(uint128)",
      [
        ethereum.Value.fromFixedBytes(_positionKey),
        ethereum.Value.fromAddress(_pool)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPoolLiquidity(
    _positionKey: Bytes,
    _pool: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolLiquidity",
      "getPoolLiquidity(bytes32,address):(uint128)",
      [
        ethereum.Value.fromFixedBytes(_positionKey),
        ethereum.Value.fromAddress(_pool)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPositionKey(_owner: Address, _tickLower: i32, _tickUpper: i32): Bytes {
    let result = super.call(
      "getPositionKey",
      "getPositionKey(address,int24,int24):(bytes32)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromI32(_tickLower),
        ethereum.Value.fromI32(_tickUpper)
      ]
    );

    return result[0].toBytes();
  }

  try_getPositionKey(
    _owner: Address,
    _tickLower: i32,
    _tickUpper: i32
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getPositionKey",
      "getPositionKey(address,int24,int24):(bytes32)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromI32(_tickLower),
        ethereum.Value.fromI32(_tickUpper)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getReserves(
    pool: Address,
    liquidity: BigInt,
    tokenId: BigInt
  ): SnapshotHelper__getReservesResult {
    let result = super.call(
      "getReserves",
      "getReserves(address,uint128,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return new SnapshotHelper__getReservesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getReserves(
    pool: Address,
    liquidity: BigInt,
    tokenId: BigInt
  ): ethereum.CallResult<SnapshotHelper__getReservesResult> {
    let result = super.tryCall(
      "getReserves",
      "getReserves(address,uint128,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromUnsignedBigInt(liquidity),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SnapshotHelper__getReservesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getTicks(tokenId: BigInt): SnapshotHelper__getTicksResult {
    let result = super.call("getTicks", "getTicks(uint256):(int24,int24)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return new SnapshotHelper__getTicksResult(
      result[0].toI32(),
      result[1].toI32()
    );
  }

  try_getTicks(
    tokenId: BigInt
  ): ethereum.CallResult<SnapshotHelper__getTicksResult> {
    let result = super.tryCall("getTicks", "getTicks(uint256):(int24,int24)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SnapshotHelper__getTicksResult(value[0].toI32(), value[1].toI32())
    );
  }
}
