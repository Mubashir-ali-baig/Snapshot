type Pool @entity {
  id: ID!
  token0: Token!
  token1: Token!
  feeTier: BigInt!
  tickSpacing: Int!
  tickLower: Int
  tickUpper: Int
}

type Token @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
}

type Snapshot @entity {
  id: ID!
  amount0: BigInt!
  amount1: BigInt!
}

type User @entity {
  id: ID!
  pool: String!
  tokenId: BigInt!
  pilotReserve: BigDecimal!
  snapshots: [UserReserveSnapshot!]!
  lowerTick: BigInt!
  upperTick: BigInt!
  lastSnapTimestamp: BigInt!
}

type UserReserveSnapshot @entity {
  id: ID!
  block: BigInt!
  totalPilot: BigDecimal!
  pilotPercentage: BigDecimal!
  liquidity: BigInt!
  timestamp: BigInt!
}

type Position @entity {
  # Positions created through NonfungiblePositionManager
  # NFT token id
  id: ID!
  # owner of the NFT
  owner: Bytes!
  # pool position is within
  pool: Pool!
  # allow indexing by tokens
  token0: Token!
  # allow indexing by tokens
  token1: Token!
  # lower tick of the position
  tickLower: BigInt!
  # upper tick of the position
  tickUpper: BigInt!
  # total position liquidity
  liquidity: BigInt!
  # amount of token 0 ever deposited to position
  depositedToken0: BigDecimal!
  # amount of token 1 ever deposited to position
  depositedToken1: BigDecimal!
  # amount of token 0 ever withdrawn from position (without fees)
  withdrawnToken0: BigDecimal!
  # amount of token 1 ever withdrawn from position (without fees)
  withdrawnToken1: BigDecimal!
  # all time collected token0 (withdrawnToken0 + collectedFeesToken0)
  collectedToken0: BigDecimal!
  # all time collected token1 (withdrawnToken1 + collectedFeesToken1)
  collectedToken1: BigDecimal!
  # all time collected fees in token0
  collectedFeesToken0: BigDecimal!
  # all time collected fees in token1
  collectedFeesToken1: BigDecimal!
  # tx in which the position was initialized
  # vars needed for fee computation
  feeGrowthInside0LastX128: BigInt!
  feeGrowthInside1LastX128: BigInt!
}
